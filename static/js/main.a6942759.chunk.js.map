{"version":3,"sources":["Components/Options.js","Components/CountriesAPI.js","Components/Intro.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["useStyles","makeStyles","theme","button","margin","spacing","withStyles","root","color","green","checked","props","Checkbox","Options","classes","React","useState","checkedA","checkedB","checkedC","Button","variant","className","startIcon","onClick","exportFromJSON","data","mockdata","fileName","exportType","types","xls","csv","xml","columns","id","label","minWidth","rows","width","container","maxHeight","CountriesAPI","setCountries","a","axios","get","response","user","useEffect","then","catch","error","console","log","getData","dados","index","length","push","name","capital","region","subRegion","subregion","population","area","timezone","timezones","nativeName","flag","page","setPage","rowsPerPage","setRowsPerPage","section4","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","key","align","style","TableBody","slice","row","hover","role","tabIndex","value","format","TablePagination","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","target","maxWidth","backgroundColor","palette","background","paper","chip","section1","section2","section3","alignContent","MiddleDividers","Grid","alignItems","item","xs","Typography","gutterBottom","Divider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.a6942759.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\nimport Convert from './Convert';\nimport CsvDownload from 'react-json-to-csv'\nimport exportFromJSON from 'export-from-json'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport KeyboardVoiceIcon from '@material-ui/icons/KeyboardVoice';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }));\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\nexport default function Options(props) {\n\n\n\n    const classes = useStyles();\n    const [state, setState] = React.useState({\n        checkedA: false,\n        checkedB: false,\n        checkedC: false,\n      });\n    const [mockdata,setMockData] = useState([])\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\nconst downloadXLS = () =>{\n    {exportFromJSON({ data: props.mockdata, fileName: 'data', exportType: exportFromJSON.types.xls })}\n\n}\n\nconst downloadXML = () =>{\n    {exportFromJSON({ data: props.mockdata, fileName: 'data', exportType: exportFromJSON.types.xml })}\n\n}\n\nconst downloadCSV = () =>{\n    {exportFromJSON({ data: props.mockdata, fileName: 'data', exportType: exportFromJSON.types.csv })}\n\n}\n  return (\n      <div>\n    <div >\n\n    <Button color=\"primary\"  ></Button>\n\n    <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<ImportExportIcon/>}\n        onClick={downloadXLS}\n    >\n        Download no Formarto XLS\n      </Button>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<ImportExportIcon/>}\n        onClick={downloadCSV}\n    >\n        Download no Formarto CSV\n      </Button>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<ImportExportIcon/>}\n        onClick={downloadXML}\n    >\n        Download no Formarto XML\n      </Button>\n\n    </div>\n\n    </div>\n   \n  );\n}\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Options from './Options';\n\n\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 100 },\n  { id: 'capital', label: 'Capital', minWidth: 100 },\n  { id: 'region', label: 'Region', minWidth: 100 },\n  { id: 'subRegion', label: 'Sub Region', minWidth: 100 },\n  { id: 'population', label: 'Population', minWidth: 100 },\n  { id: 'area', label: 'Area', minWidth: 100 },\n  { id: 'timezone', label: 'timezone', minWidth: 100 },\n  { id: 'nativeName', label: 'native Name', minWidth: 100 },\n  { id: 'flag', label: 'Link Bandeira', minWidth: 100 },\n  \n];\nlet rows= []\n\nfunction createData(name, capital, region,subRegion,population,area,timezone,nativeName,flag) {\n  return { name, capital, region, subRegion, population,area,timezone,nativeName,flag};\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\n\n\nexport default function CountriesAPI() {\n\n    const [countries,setCountries] = useState([])\n\nuseEffect(() => {\n        axios.get('https://restcountries.eu/rest/v2').then(\n            response => {\n                setCountries(response.data)\n            } \n        ).catch(error =>{ \n            console.log(error)\n    }\n        )\n    },[])   \n\n\nvar dados = getData()\n     \ndados.then(function(dados){\n    for (let index = 0; index < dados.length-1; index++) {\n        rows.push(createData(dados[index].name,dados[index].capital,dados[index].region,dados[index].subregion,dados[index].population,dados[index].area,dados[index].timezones[0],dados[index].nativeName,dados[index].flag));\n        \n    }\n\n })\n\nasync function getData() {\n\n        let response = await axios.get('https://restcountries.eu/rest/v2');\n        let user = await response.data\n        return user;\n      }\n  \n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n   \n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n\n\nif(rows.length < 1 ){\nreturn(\n    <div>\n        \n        <h2>Looding... </h2>\n    </div>\n)\n}else{\n  return (\n      <div>\n        <div>\n          <div className={classes.section4} ><Options mockdata={rows} ></Options></div>\n          <h2></h2>\n        </div>\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : \n                        value }\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n    </div>\n  )\n \n}\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Options from './Options';\nimport CountriesAPI from './CountriesAPI';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n  section1: {\n    margin: theme.spacing(3, 2),\n  },\n  section2: {\n    margin: theme.spacing(2),\n  },\n  section3: {\n    margin: theme.spacing(3, 1, 1),\n  },\n  section4:{\n    alignContent:\"center\",\n    margin: theme.spacing(4,0,0,4)\n  },\n}));\n\nexport default function MiddleDividers() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.section1} >\n        <Grid container alignItems=\"center\">\n          <Grid item xs>\n            <Typography gutterBottom variant=\"h6\">\n             CLIENT REST - Propriedades dos Paises\n            </Typography>\n          </Grid>\n        </Grid>\n        <Typography color=\"textSecondary\" variant=\"body2\">\n          Please choose type that you want to convert\n        </Typography>\n      </div>\n      <Divider variant=\"middle\" />\n      <div className={classes.section2}>\n        <Typography gutterBottom variant=\"body1\">\n          Select type to Download\n        </Typography>\n      </div>\n     <CountriesAPI></CountriesAPI>\n    </div>\n\n  );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CountriesAPI from './Components/CountriesAPI';\nimport MiddleDividers from './Components/Intro';\nimport Options from './Components/Options';\nimport Convert from './Components/Convert';\n\nfunction App() {\n  return (\n    <div className=\"App\">     \n\n    <MiddleDividers>\n    </MiddleDividers>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}