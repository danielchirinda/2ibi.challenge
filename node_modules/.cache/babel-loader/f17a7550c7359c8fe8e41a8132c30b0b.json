{"ast":null,"code":"import { assert, isArray, normalizeFileName } from './utils';\nimport { downloadFile } from './processors';\nimport { _prepareData, _createJSONData, createCSVData, createXLSData, createXMLData } from './converters';\n\nfunction exportFromJSON(_a) {\n  var data = _a.data,\n      _b = _a.fileName,\n      fileName = _b === void 0 ? 'download' : _b,\n      _c = _a.exportType,\n      exportType = _c === void 0 ? 'txt' : _c,\n      _d = _a.replacer,\n      replacer = _d === void 0 ? null : _d,\n      _e = _a.space,\n      space = _e === void 0 ? 4 : _e,\n      _f = _a.processor,\n      processor = _f === void 0 ? downloadFile : _f,\n      _g = _a.withBOM,\n      withBOM = _g === void 0 ? false : _g,\n      _h = _a.delimiter,\n      delimiter = _h === void 0 ? ',' : _h;\n  var MESSAGE_IS_ARRAY_FAIL = 'Invalid export data. Please provide an array of object';\n  var MESSAGE_UNKNOWN_EXPORT_TYPE = \"Can't export unknown data type \" + exportType + \".\";\n\n  var safeData = _prepareData(data);\n\n  var JSONData = _createJSONData(safeData, replacer, space);\n\n  switch (exportType) {\n    case 'txt':\n      {\n        return processor(JSONData, exportType, normalizeFileName(fileName, 'txt'));\n      }\n\n    case 'json':\n      {\n        return processor(JSONData, exportType, normalizeFileName(fileName, 'json'));\n      }\n\n    case 'csv':\n      {\n        assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n        var BOM = '\\ufeff';\n        var CSVData = createCSVData(safeData, delimiter);\n        var content = withBOM ? BOM + CSVData : CSVData;\n        return processor(content, exportType, normalizeFileName(fileName, 'csv'));\n      }\n\n    case 'xls':\n      {\n        assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n        var content = createXLSData(safeData);\n        return processor(content, exportType, normalizeFileName(fileName, 'xls'));\n      }\n\n    case 'xml':\n      {\n        var content = createXMLData(safeData);\n        return processor(content, exportType, normalizeFileName(fileName, 'xml'));\n      }\n\n    default:\n      throw new Error(MESSAGE_UNKNOWN_EXPORT_TYPE);\n  }\n}\n\n(function (exportFromJSON) {\n  exportFromJSON.types = {\n    txt: 'txt',\n    json: 'json',\n    csv: 'csv',\n    xls: 'xls',\n    xml: 'xml'\n  };\n  exportFromJSON.processors = {\n    downloadFile: downloadFile\n  };\n})(exportFromJSON || (exportFromJSON = {}));\n\nexport default exportFromJSON;","map":{"version":3,"sources":["/home/nhomo/2ibi.challenge/restcountries/node_modules/export-from-json/dist/esm/exportFromJSON.js"],"names":["assert","isArray","normalizeFileName","downloadFile","_prepareData","_createJSONData","createCSVData","createXLSData","createXMLData","exportFromJSON","_a","data","_b","fileName","_c","exportType","_d","replacer","_e","space","_f","processor","_g","withBOM","_h","delimiter","MESSAGE_IS_ARRAY_FAIL","MESSAGE_UNKNOWN_EXPORT_TYPE","safeData","JSONData","BOM","CSVData","content","Error","types","txt","json","csv","xls","xml","processors"],"mappings":"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","sourcesContent":["import { assert, isArray, normalizeFileName } from './utils';\nimport { downloadFile } from './processors';\nimport { _prepareData, _createJSONData, createCSVData, createXLSData, createXMLData } from './converters';\nfunction exportFromJSON(_a) {\n    var data = _a.data, _b = _a.fileName, fileName = _b === void 0 ? 'download' : _b, _c = _a.exportType, exportType = _c === void 0 ? 'txt' : _c, _d = _a.replacer, replacer = _d === void 0 ? null : _d, _e = _a.space, space = _e === void 0 ? 4 : _e, _f = _a.processor, processor = _f === void 0 ? downloadFile : _f, _g = _a.withBOM, withBOM = _g === void 0 ? false : _g, _h = _a.delimiter, delimiter = _h === void 0 ? ',' : _h;\n    var MESSAGE_IS_ARRAY_FAIL = 'Invalid export data. Please provide an array of object';\n    var MESSAGE_UNKNOWN_EXPORT_TYPE = \"Can't export unknown data type \" + exportType + \".\";\n    var safeData = _prepareData(data);\n    var JSONData = _createJSONData(safeData, replacer, space);\n    switch (exportType) {\n        case 'txt': {\n            return processor(JSONData, exportType, normalizeFileName(fileName, 'txt'));\n        }\n        case 'json': {\n            return processor(JSONData, exportType, normalizeFileName(fileName, 'json'));\n        }\n        case 'csv': {\n            assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n            var BOM = '\\ufeff';\n            var CSVData = createCSVData(safeData, delimiter);\n            var content = withBOM ? BOM + CSVData : CSVData;\n            return processor(content, exportType, normalizeFileName(fileName, 'csv'));\n        }\n        case 'xls': {\n            assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n            var content = createXLSData(safeData);\n            return processor(content, exportType, normalizeFileName(fileName, 'xls'));\n        }\n        case 'xml': {\n            var content = createXMLData(safeData);\n            return processor(content, exportType, normalizeFileName(fileName, 'xml'));\n        }\n        default:\n            throw new Error(MESSAGE_UNKNOWN_EXPORT_TYPE);\n    }\n}\n(function (exportFromJSON) {\n    exportFromJSON.types = {\n        txt: 'txt',\n        json: 'json',\n        csv: 'csv',\n        xls: 'xls',\n        xml: 'xml',\n    };\n    exportFromJSON.processors = { downloadFile: downloadFile };\n})(exportFromJSON || (exportFromJSON = {}));\nexport default exportFromJSON;\n"]},"metadata":{},"sourceType":"module"}