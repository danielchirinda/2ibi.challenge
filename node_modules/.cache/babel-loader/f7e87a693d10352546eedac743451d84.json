{"ast":null,"code":"export function isArray(data) {\n  return Object.prototype.toString.call(data) === '[object Array]';\n}\nexport function assert(condition, msg) {\n  if (!condition) throw new Error(msg);\n}\nexport function getValues(data) {\n  return Object.keys(data).map(function (key) {\n    return data[key];\n  });\n}\nexport function getKeys(data) {\n  return Object.keys(data);\n}\nexport function getEntries(data) {\n  return Object.keys(data).map(function (key) {\n    return [key, data[key]];\n  });\n}\nexport function normalizeFileName(fileName, extension) {\n  var suffix = '.' + extension;\n  var extensionPattern = new RegExp(\"(\\\\\" + extension + \")?$\");\n  return fileName.replace(/\\s+/, '_').replace(extensionPattern, suffix);\n}\nexport function normalizeXMLName(name) {\n  '555xmlHello .  world!'.trim().replace(/^([0-9,;]|(xml))+/, '');\n  return name.replace(/[^_a-zA-Z 0-9:\\-\\.]/g, '').replace(/^([ 0-9-:\\-\\.]|(xml))+/i, '').replace(/ +/g, '-');\n}\nexport function indent(spaces) {\n  return Array(spaces + 1).join(' ');\n}\nexport function stripHTML(text) {\n  return text.replace(/([<>&])/g, function (_, $1) {\n    switch ($1) {\n      case '<':\n        return '&lt;';\n\n      case '>':\n        return '&gt;';\n\n      case '&':\n        return '&amp;';\n\n      default:\n        return '';\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Daniel Chirindza/git/2ibi.challenge/node_modules/export-from-json/dist/esm/utils.js"],"names":["isArray","data","Object","prototype","toString","call","assert","condition","msg","Error","getValues","keys","map","key","getKeys","getEntries","normalizeFileName","fileName","extension","suffix","extensionPattern","RegExp","replace","normalizeXMLName","name","trim","indent","spaces","Array","join","stripHTML","text","_","$1"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AAC1B,SAAOC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,IAA/B,MAAyC,gBAAhD;AACH;AACD,OAAO,SAASK,MAAT,CAAgBC,SAAhB,EAA2BC,GAA3B,EAAgC;AACnC,MAAI,CAACD,SAAL,EACI,MAAM,IAAIE,KAAJ,CAAUD,GAAV,CAAN;AACP;AACD,OAAO,SAASE,SAAT,CAAmBT,IAAnB,EAAyB;AAC5B,SAAOC,MAAM,CAACS,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsB,UAAUC,GAAV,EAAe;AAAE,WAAOZ,IAAI,CAACY,GAAD,CAAX;AAAmB,GAA1D,CAAP;AACH;AACD,OAAO,SAASC,OAAT,CAAiBb,IAAjB,EAAuB;AAC1B,SAAOC,MAAM,CAACS,IAAP,CAAYV,IAAZ,CAAP;AACH;AACD,OAAO,SAASc,UAAT,CAAoBd,IAApB,EAA0B;AAC7B,SAAOC,MAAM,CAACS,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsB,UAAUC,GAAV,EAAe;AAAE,WAAO,CAACA,GAAD,EAAMZ,IAAI,CAACY,GAAD,CAAV,CAAP;AAA0B,GAAjE,CAAP;AACH;AACD,OAAO,SAASG,iBAAT,CAA2BC,QAA3B,EAAqCC,SAArC,EAAgD;AACnD,MAAIC,MAAM,GAAG,MAAMD,SAAnB;AACA,MAAIE,gBAAgB,GAAG,IAAIC,MAAJ,CAAW,QAAQH,SAAR,GAAoB,KAA/B,CAAvB;AACA,SAAOD,QAAQ,CAACK,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqCF,gBAArC,EAAuDD,MAAvD,CAAP;AACH;AACD,OAAO,SAASI,gBAAT,CAA0BC,IAA1B,EAAgC;AACnC,0BAAwBC,IAAxB,GAA+BH,OAA/B,CAAuC,mBAAvC,EAA4D,EAA5D;AACA,SAAOE,IAAI,CAACF,OAAL,CAAa,sBAAb,EAAqC,EAArC,EAAyCA,OAAzC,CAAiD,yBAAjD,EAA4E,EAA5E,EAAgFA,OAAhF,CAAwF,KAAxF,EAA+F,GAA/F,CAAP;AACH;AACD,OAAO,SAASI,MAAT,CAAgBC,MAAhB,EAAwB;AAC3B,SAAOC,KAAK,CAACD,MAAM,GAAG,CAAV,CAAL,CAAkBE,IAAlB,CAAuB,GAAvB,CAAP;AACH;AACD,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAC5B,SAAOA,IAAI,CAACT,OAAL,CAAa,UAAb,EAAyB,UAAUU,CAAV,EAAaC,EAAb,EAAiB;AAC7C,YAAQA,EAAR;AACI,WAAK,GAAL;AAAU,eAAO,MAAP;;AACV,WAAK,GAAL;AAAU,eAAO,MAAP;;AACV,WAAK,GAAL;AAAU,eAAO,OAAP;;AACV;AAAS,eAAO,EAAP;AAJb;AAMH,GAPM,CAAP;AAQH","sourcesContent":["export function isArray(data) {\n    return Object.prototype.toString.call(data) === '[object Array]';\n}\nexport function assert(condition, msg) {\n    if (!condition)\n        throw new Error(msg);\n}\nexport function getValues(data) {\n    return Object.keys(data).map(function (key) { return data[key]; });\n}\nexport function getKeys(data) {\n    return Object.keys(data);\n}\nexport function getEntries(data) {\n    return Object.keys(data).map(function (key) { return [key, data[key]]; });\n}\nexport function normalizeFileName(fileName, extension) {\n    var suffix = '.' + extension;\n    var extensionPattern = new RegExp(\"(\\\\\" + extension + \")?$\");\n    return fileName.replace(/\\s+/, '_').replace(extensionPattern, suffix);\n}\nexport function normalizeXMLName(name) {\n    '555xmlHello .  world!'.trim().replace(/^([0-9,;]|(xml))+/, '');\n    return name.replace(/[^_a-zA-Z 0-9:\\-\\.]/g, '').replace(/^([ 0-9-:\\-\\.]|(xml))+/i, '').replace(/ +/g, '-');\n}\nexport function indent(spaces) {\n    return Array(spaces + 1).join(' ');\n}\nexport function stripHTML(text) {\n    return text.replace(/([<>&])/g, function (_, $1) {\n        switch ($1) {\n            case '<': return '&lt;';\n            case '>': return '&gt;';\n            case '&': return '&amp;';\n            default: return '';\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}